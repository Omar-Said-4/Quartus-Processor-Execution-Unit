// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/18/2022 00:05:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Block5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Block5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] ALUS;
reg CLK;
reg [1:0] OPoneS;
reg [1:0] OPtwoS;
reg [3:0] V;
// wires                                               
wire [3:0] ALUO;
wire [3:0] RFA;
wire [3:0] RFB;
wire [3:0] RFC;

// assign statements (if any)                          
Block5 i1 (
// port map - connection between master ports and signals/registers   
	.ALUO(ALUO),
	.ALUS(ALUS),
	.CLK(CLK),
	.OPoneS(OPoneS),
	.OPtwoS(OPtwoS),
	.RFA(RFA),
	.RFB(RFB),
	.RFC(RFC),
	.V(V)
);
initial 
begin 
#1000000 $finish;
end 
// ALUS[ 1 ]
initial
begin
	ALUS[1] = 1'b0;
	ALUS[1] = #30000 1'b1;
	ALUS[1] = #40000 1'b0;
	ALUS[1] = #10000 1'b1;
	ALUS[1] = #30000 1'b0;
	# 20000;
	repeat(21)
	begin
		ALUS[1] = 1'b1;
		ALUS[1] = #20000 1'b0;
		# 20000;
	end
	ALUS[1] = 1'b1;
	ALUS[1] = #20000 1'b0;
end 
// ALUS[ 0 ]
initial
begin
	ALUS[0] = 1'b0;
	ALUS[0] = #40000 1'b1;
	ALUS[0] = #10000 1'b0;
	ALUS[0] = #10000 1'b1;
	ALUS[0] = #10000 1'b0;
	ALUS[0] = #30000 1'b1;
	ALUS[0] = #10000 1'b0;
	# 10000;
	repeat(44)
	begin
		ALUS[0] = 1'b1;
		ALUS[0] = #10000 1'b0;
		# 10000;
	end
end 

// CLK
initial
begin
	CLK = 1'b1;
	# 5000;
	repeat(99)
	begin
		CLK = 1'b0;
		CLK = #5000 1'b1;
		# 5000;
	end
	CLK = 1'b0;
end 
// OPoneS[ 1 ]
initial
begin
	OPoneS[1] = 1'b1;
	OPoneS[1] = #30000 1'b0;
	OPoneS[1] = #20000 1'b1;
	OPoneS[1] = #20000 1'b0;
	OPoneS[1] = #30000 1'b1;
	OPoneS[1] = #10000 1'b0;
	# 20000;
	repeat(21)
	begin
		OPoneS[1] = 1'b1;
		OPoneS[1] = #20000 1'b0;
		# 20000;
	end
	OPoneS[1] = 1'b1;
	OPoneS[1] = #20000 1'b0;
end 
// OPoneS[ 0 ]
initial
begin
	OPoneS[0] = 1'b1;
	OPoneS[0] = #30000 1'b0;
	OPoneS[0] = #10000 1'b1;
	OPoneS[0] = #30000 1'b0;
	OPoneS[0] = #10000 1'b1;
	OPoneS[0] = #30000 1'b0;
	# 10000;
	repeat(44)
	begin
		OPoneS[0] = 1'b1;
		OPoneS[0] = #10000 1'b0;
		# 10000;
	end
end 
// OPtwoS[ 1 ]
initial
begin
	OPtwoS[1] = 1'b0;
	OPtwoS[1] = #30000 1'b1;
	OPtwoS[1] = #5000 1'b0;
	OPtwoS[1] = #10000 1'b1;
	OPtwoS[1] = #20000 1'b0;
	OPtwoS[1] = #20000 1'b1;
	OPtwoS[1] = #35000 1'b0;
	OPtwoS[1] = #20000 1'b1;
	# 20000;
	repeat(21)
	begin
		OPtwoS[1] = 1'b0;
		OPtwoS[1] = #20000 1'b1;
		# 20000;
	end
end 
// OPtwoS[ 0 ]
initial
begin
	OPtwoS[0] = 1'b0;
	OPtwoS[0] = #20000 1'b1;
	OPtwoS[0] = #10000 1'b0;
	OPtwoS[0] = #5000 1'b1;
	OPtwoS[0] = #10000 1'b0;
	OPtwoS[0] = #30000 1'b1;
	OPtwoS[0] = #10000 1'b0;
	OPtwoS[0] = #25000 1'b1;
	# 10000;
	repeat(44)
	begin
		OPtwoS[0] = 1'b0;
		OPtwoS[0] = #10000 1'b1;
		# 10000;
	end
end 
// V[ 3 ]
initial
begin
	V[3] = 1'b1;
	V[3] = #40000 1'b0;
	V[3] = #10000 1'b1;
	V[3] = #100000 1'b0;
	# 80000;
	repeat(4)
	begin
		V[3] = 1'b1;
		V[3] = #80000 1'b0;
		# 80000;
	end
	V[3] = 1'b1;
	V[3] = #80000 1'b0;
end 
// V[ 2 ]
initial
begin
	V[2] = 1'b0;
	V[2] = #40000 1'b1;
	V[2] = #10000 1'b0;
	V[2] = #60000 1'b1;
	V[2] = #40000 1'b0;
	# 40000;
	repeat(10)
	begin
		V[2] = 1'b1;
		V[2] = #40000 1'b0;
		# 40000;
	end
	V[2] = 1'b1;
end 
// V[ 1 ]
initial
begin
	V[1] = 1'b0;
	V[1] = #20000 1'b1;
	V[1] = #20000 1'b0;
	V[1] = #20000 1'b1;
	V[1] = #10000 1'b0;
	# 20000;
	repeat(22)
	begin
		V[1] = 1'b1;
		V[1] = #20000 1'b0;
		# 20000;
	end
	V[1] = 1'b1;
	V[1] = #20000 1'b0;
end 
// V[ 0 ]
initial
begin
	V[0] = 1'b0;
	V[0] = #10000 1'b1;
	V[0] = #10000 1'b0;
	V[0] = #20000 1'b1;
	V[0] = #10000 1'b0;
	V[0] = #30000 1'b1;
	V[0] = #10000 1'b0;
	# 10000;
	repeat(45)
	begin
		V[0] = 1'b1;
		V[0] = #10000 1'b0;
		# 10000;
	end
end 
endmodule

